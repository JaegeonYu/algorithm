import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;

public class Pro8888 {

	public static void main(String[] args) throws IOException {
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int TC = Integer.parseInt(br.readLine());
		for(int T=1;T<=TC;T++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			int n = Integer.parseInt(st.nextToken());
			int t = Integer.parseInt(st.nextToken());
			int p = Integer.parseInt(st.nextToken());
			int[][] arr = new int[n][t];
			int[] score = new int[t];
			for(int i=0;i<n;i++) {
				st = new StringTokenizer(br.readLine());
				for(int j=0;j<t;j++) {
					arr[i][j]=Integer.parseInt(st.nextToken());
				}
			}
			//문제 배점 구하기
			for(int i=0;i<t;i++) {
				int count = 0;
				for(int j=0;j<n;j++) {
					if(arr[j][i]==1)count++;
				}
				score[i]=n-count;
			}
			List<Person> personList = new LinkedList<>();
			for(int i=0;i<n;i++) {
				int count = 0;
				int value = 0;
				for(int j=0;j<t;j++) {
					if(arr[i][j]==1) {
						count++;
						value+=score[j];
					}
				}
				personList.add(new Person(i+1,count,value));
			}
			Collections.sort(personList);
			Person tmp=null;
			int rank = 0;
			for(int i=0;i<personList.size();i++) {
				if(personList.get(i).index==p) {
					rank=i+1;
					tmp = personList.get(i);
				}
			}
			bw.write("#"+T+" "+tmp.value+" "+rank+"\n");
		}
		bw.flush();
		bw.close();
	
	}

}
class Person implements Comparable<Person>{
	int index;
	int count;
	int value;
	
	public Person(int index, int count, int value) {
		this.index = index;
		this.count = count;
		this.value = value;
	}

	@Override
	public int compareTo(Person o) {
		if(this.value==o.value) {
			if(this.count==o.count) {
				return this.index - o.index;
			}else return o.count - this.count;
		}else return o.value - this.value;
	}	
}